version: "3"
services:
  nestjs:
    build:
      context: ./back
      dockerfile: ./docker/Dockerfile
    container_name: nestjs
    ports:
      - 3000:3000
    depends_on:
      - postgres
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - back:/app
      - /app/node_modules
    restart: always
    environment:
      API_URL: ${API_URL}
      # POSTGRES_USER: ${DB_USERNAME}
      # POSTGRES_PASSWORD: ${DB_PASSWORD}
      # POSTGRES_DB: ${DB_NAME}
      # DB_PORT: ${DB_PORT}
      # JWT_SECRET: ${JWT_SECRET}
      # CLIENT_ID: ${CLIENT_ID}
      # OAUTH_INTRA: ${OAUTH_INTRA}
      # OAUTH_INTRA_NEXT: ${OAUTH_INTRA_NEXT}

  postgres:
    build: db/
    container_name: postgres
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    restart: always

  react:
    build:
      context: ./front
      dockerfile: ./docker/Dockerfile
    container_name: react
    ports:
      - 3006:3006
    depends_on:
      - nestjs
    volumes:
      - front:/app
      - /app/node_modules
    restart: always

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"

# ------------------------------------------------------------------------- #
volumes:
  postgres_data:
  pgadmin_data:
  front:
    driver: local
    driver_opts:
      type: none
      device: ${FRONT_VOLUME}
      o: bind
  back:
    driver: local
    driver_opts:
      type: none
      device: ${BACK_VOLUME}
      o: bind
